<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDebugRect</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set variables
//x = room_width / 2;
//y = room_height / 2;

BossState = "Swimming";

path_start(pJellyfishSwimming, 3, path_action_continue, false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create bricks of the boss
// glass bricks
enum JellyfishBricks {
    Glass = 1,
    Green = 2,
    Metal = 3,
    Purple = 4,
    Heart = 5
}

var WidthMiniBrick = sprite_get_width(object_get_sprite(oJellyfishMiniGlassBrick));
var HeightMiniBrick = sprite_get_height(object_get_sprite(oJellyfishMiniGlassBrick));

var WidthHeart = sprite_get_width(object_get_sprite(oJellyfishHeart));
var HeightHeart = sprite_get_height(object_get_sprite(oJellyfishHeart));

var JsonFile = ReadJsonFile("jellyfish-boss-map.json");
var DefaultList = ds_map_find_value(JsonFile, "default");

for(var i = 0; i &lt; 1; i++)
{
    var JsonObj = ds_list_find_value(DefaultList, i);
    var WidthBoss = JsonObj[? "width"];
    var HeightBoss = JsonObj[? "height"];
    
    var WidthCount = 1;
    var HeightCount = 1;
    
    var BossMap = JsonObj[? "map"];
    var Size = ds_list_size(BossMap);
    for(var j = 0; j &lt; Size; j++)
    {
        var Tile = ds_list_find_value(BossMap, j);
        switch (Tile)
        {
            case JellyfishBricks.Glass:
                CreateBrick(WidthCount * WidthMiniBrick, HeightCount * HeightMiniBrick, oJellyfishMiniGlassBrick, id);
                break;
            case JellyfishBricks.Green:
                CreateBrick(WidthCount * WidthMiniBrick, HeightCount * HeightMiniBrick, oJellyfishMiniGreenBrick, id);
                break;
            case JellyfishBricks.Metal:
                CreateBrick(WidthCount * WidthMiniBrick, HeightCount * HeightMiniBrick, oJellyfishMiniMetalBrick, id);
                break;
            case JellyfishBricks.Purple:
                CreateBrick(WidthCount * WidthMiniBrick, HeightCount * HeightMiniBrick, oJellyfishMiniPurpleBrick, id);
                break;
            case JellyfishBricks.Heart:
                CreateBrick((WidthCount * WidthMiniBrick) + WidthMiniBrick / 2, HeightCount * HeightMiniBrick, oJellyfishHeart, id);
                break;
        }
        WidthCount++;
        
        // If the line of the map has ended
        if WidthCount &gt; 10
        {
            WidthCount = 1;
            HeightCount++;
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State control
if BossState == "Swimming"
{
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

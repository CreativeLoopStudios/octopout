<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set variables
accel = 100 / room_speed;
decel = 50 / room_speed;
max_spd = 600 / room_speed;

AnimationSpeed = 0.2;

init_width = sprite_width;
init_height = sprite_height;

NumberOfBubblesWhenMoving = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// player controllers
var gamepad_horizontal_left_pressed = (gamepad_axis_value(0, gp_axislh) &lt; (-0.2));
var gamepad_horizontal_right_pressed = (gamepad_axis_value(0, gp_axislh) &gt; 0.2);
var left_pressed = keyboard_check(vk_left);
var right_pressed = keyboard_check(vk_right);

// if gamepad or keyboard are pressed
var gamepad_pressed = gamepad_horizontal_left_pressed or gamepad_horizontal_right_pressed;
var keyboard_pressed = left_pressed or right_pressed;

var left_right_pressed_or_not = (left_pressed and right_pressed) or (not(left_pressed) and not(right_pressed));
var gamepad_pressed_or_not = (gamepad_horizontal_left_pressed and gamepad_horizontal_right_pressed) or (not(gamepad_horizontal_left_pressed) and not(gamepad_horizontal_right_pressed));

// If right is pressed accelerate hspeed in the right direction
if (right_pressed or gamepad_horizontal_right_pressed)
{
    hspeed += accel;
    hspeed = min(hspeed, max_spd);
    
    var max_x_allowed = room_width - (sprite_width/2 + global.BorderMargin);
    
    if(x + hspeed &gt; max_x_allowed)
    {
        hspeed =  max_x_allowed - x;
    }
    
    ChangeSprite(sPlayerRight, AnimationSpeed);
    part_particles_create(global.ParticulesSystem, x, random_range(y, y - (sprite_width / 2)), global.BubbleParticle, NumberOfBubblesWhenMoving);
    part_particles_create(global.ParticulesSystem, x, y, global.BubbleParticle, NumberOfBubblesWhenMoving);
    part_particles_create(global.ParticulesSystem, x, random_range(y, y + (sprite_width / 2)), global.BubbleParticle, NumberOfBubblesWhenMoving);
}

// If left is pressed accelerate hspeed in the left direction
if(left_pressed or gamepad_horizontal_left_pressed) {
    hspeed -= accel;
    hspeed = max(hspeed, -max_spd);
    
    var min_x_allowed = sprite_width/2 + global.BorderMargin;
     
    if(x + hspeed &lt; min_x_allowed)
    {
        hspeed =  -(x - min_x_allowed);
    }
    
    ChangeSprite(sPlayerLeft, AnimationSpeed);
    part_particles_create(global.ParticulesSystem, x, random_range(y, y - (sprite_width / 2)), global.BubbleParticle, NumberOfBubblesWhenMoving);
    part_particles_create(global.ParticulesSystem, x, y, global.BubbleParticle, NumberOfBubblesWhenMoving);
    part_particles_create(global.ParticulesSystem, x, random_range(y, y + (sprite_width / 2)), global.BubbleParticle, NumberOfBubblesWhenMoving);
}

if(left_right_pressed_or_not and gamepad_pressed_or_not) {
    if (hspeed &gt;= decel) hspeed -= decel;
    if (hspeed &lt;= -decel) hspeed += decel;
    if (hspeed &gt; -decel) &amp;&amp; (hspeed &lt; decel) hspeed = 0;
    ChangeSprite(sPlayer, 1);
}

KeepInsideRoom(sprite_width, hspeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

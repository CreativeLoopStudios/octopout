<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set variables
max_spd = 800 / room_speed;
min_spd = 400 / room_speed;
up_spd = 25 / room_speed;
down_spd = 0.8

State = "Hold";
direction = random_range(20, 200);

// black ball power up
NumberOfTimesToCreateBlackBall = 3;

IsSpriteChanged = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ball movement
if State == "Hold"
{
    // stopping the ball
    speed = 0;
    // ball movement with player
    if instance_exists(oPlayer)
    {
        x = oPlayer.x;
    }
    // if space is pressed, release the KRAKEN!
    if keyboard_check_pressed(vk_space)
    {
        speed = min_spd;
        State = "Move";
    }
}
else if State == "Move"
{
    // Create bubble trail
    part_particles_create(global.ParticulesSystem, x, y, global.BubbleParticle, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// collision
if (y &lt;= global.BorderMargin + (sprite_width / 2) or y &gt;= room_height)
{
    vspeed *= -1;
    if direction == 90 or direction == 270
    {
        direction += 5;
    }
    
    if(y &gt;= room_height)
    {
        PlayerLoseHealth();
        instance_destroy();
    }
}

if (x &lt;= global.BorderMargin + (sprite_width / 2) or x &gt;= room_width - global.BorderMargin - (sprite_width / 2))
{
    hspeed *= -1;
    if direction == 0 or direction == 180
    {
        direction += 5;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// collision with player

if instance_exists(oPlayer) and place_meeting(x + hspeed, y + vspeed, oPlayer)
{
    move_bounce_all(true);
    if State != "BlackBall"
    {
        NumberOfTimesToCreateBlackBall -= 1;
    }
    if(abs(oPlayer.hspeed) == 0 ){
        speed *= down_spd
        speed = max(speed, min_spd);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create black ball
if NumberOfTimesToCreateBlackBall == 0
{
    State = "BlackBall";
    IsSpriteChanged = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// collision with brick
var brick = instance_place(x + hspeed, y + vspeed, oDefaultBrick);

if instance_exists(brick)
{
    move_bounce_all(true);
    speed += up_spd;
    speed = min(speed, max_spd)
    
    with brick {
        if(CanBreak)
        {
            BrickHitDetected();
        }
    }
} 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// change sprite
if IsSpriteChanged
{
    if State == "BlackBall"
    {
        sprite_index = sBlackBall;
        NumberOfTimesToCreateBlackBall = 3;
        image_speed = 0;
    }
    else
    {
        sprite_index = sBall;
    }
    IsSpriteChanged = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug: increase speed
if global.Debug == true
{
    if keyboard_check_pressed(vk_add)
    {
        speed += 100 / room_speed;
    }
    
    if keyboard_check_pressed(vk_subtract)
    {
        speed -= 100 / room_speed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
